---
layout: post
status: publish
published: true
title: Taking CMake for a spin
author: Rui Pires
author_login: rui
author_email: rui@sennin.pt
author_url: http://www.sennin.pt
wordpress_id: 438
wordpress_url: http://www.sennin.pt/?p=438
date: '2014-03-23 17:14:30 +0000'
date_gmt: '2014-03-23 17:14:30 +0000'
categories:
- Uncategorized
tags: [tools, cmake, c++]
comments:
- id: 5706
  author: Sennin &raquo; Biicode
  author_email: ''
  author_url: http://www.sennin.pt/2015/03/29/biicode/
  date: '2015-03-29 23:30:08 +0000'
  date_gmt: '2015-03-29 23:30:08 +0000'
  content: "[&#8230;] have heard about it in blog posts, in podcasts, and I have been
    looking for a tool like [&#8230;]"
---
<p><a href="http://www.cmake.org"><img class="alignright" alt="" src="http://www.cmake.org/opensourcelogos/cmake100.png" width="252" height="100" /></a></p>
<p>Another page on the <a title="Battle of the build systems" href="http://www.sennin.pt/2012/05/29/battle-of-the-build-systems/">battle of build systems</a>, I am now moving on to CMake, after giving SCons a try.</p>
<p><span style="line-height: 1.5em;">The </span><a style="line-height: 1.5em;" href="http://ryppl.org/">ryppl</a><span style="line-height: 1.5em;"> project by </span><a style="line-height: 1.5em;" href="http://daveabrahams.com/">Dave Abrahams</a><span style="line-height: 1.5em;"> et al to give the C++ community a tool to be able to leverage recent technology to provide us composable, portable C++ libraries (mostly from the developer perspective) got me re-thinking if I should be settling with a tool that would make me implement all of what I needed for each new project.</span></p>
<p>They have decided to base their tool on CMake, so I decided to start using that while ryppl is not available. This way I get to learn a new tool that has a very wide user base, and maybe I'll learn enough about it that I can try and make some contributions to the ryppl project.</p>
<p>I got the basic working by porting one of my pet project from using SCons to CMake, but then I stumbled on the ExternalProject module. That allows us to specify a remote project (zip, tarball, SVN repo, Git repo, etc) and cmake will download, configure, compile and install it.</p>
<p>There are ways to control each of theses steps. I normally like to keep project dependencies on the project tree, to avoid having my machine filled with development packages installed in a central location (just thinking of juggling incompatible versions for different projects sends chills down my spine). To do this I can just make the packages be installed locally, or just inhibit the install step altogether.</p>
<p>But I do have my complains about CMake.</p>
<p>I find the syntax awkward. The documentation is not very well structured for a beginner (I've seen worse). There is no way to enforce some rules, so if I depend on the findXYZ library macros, there is no way for sure to know what was set in default properties until I try them out.</p>
<p>But luckily, the big user base is a really a boon for us. I got google test to be fecthed by CMake, compiled locally use it in my project thanks to <a href="https://gist.github.com/oneamtu/3734295">this github gist</a> from&nbsp;https://gist.github.com/oneamtu <a href="https://gist.github.com/oneamtu">oneamtu</a>.</p>
<p>Next step: try to start using the <a href="https://svn.boost.org/trac/boost/wiki/CMakeModularizationStatus">CMake version of Modular Boost.</a></p>
